

<div class="container my-5 py-4">
    <div class="row">
        <div class="col-sm-6">
            
            <img id="myImg" src="{{ product.featured_image.src | product_img_url: 'large' }}" class="product-image" width="500">

            <!-- The Modal - Zoom -->
            <div id="myModal" class="img-modal">
                <img class="img-modal-content" id="img01">
            </div>

        </div>
        <div class="col-sm-6 product-description">
            <h2 class="product-title">{{ product.title }}</h2>

            <p class="product-description">{{ product.description }}</p>

            <p class="mt-4">Price:</p>

            <p class="" id="price-box"> {{ product.price | | money }} </p>

            <!-- <div class="addon-block my-5">
                <p>Addon products:</p>
                {% for tag in product.tags %}
                    
                    {% assign handle_addon = tag | split: '_' | last %} 
                    {% assign product_addon = all_products[handle_addon] %}
                    {% assign variant_addon = product_addon.first_available_variant %}
                    
                    <div class="addon-data">
                        <input type="checkbox" value="{{ variant_addon.id }}"> Add  
                        <a href="{{ product_addon.url }}" target="_blank"> {{ product_addon.title }}</a>
                        <span> (Price: {{ product_addon.price | | money }}) </span>
                    </div>
                {% endfor %}
            </div> -->

            <!-- <p>
                variants:
                {% assign color = product.variants.option1 %}

                {% for variant in product.variants %}
                    {{ variant.option1 | uniq }}  
                {% endfor %}
                
                {{ color }}
            </p> -->

            {% comment %} Color swatch {% endcomment %}
            {%- unless product.has_only_default_variant -%}
            <label>
                <p> Color </p>
                
                <ul class="color-swatch">
                  {% for color_option in product.options_by_name['Color'].values %}
                    <li class="color-option">
                        <p> {{ color_option }} </p> 
                    </li>
                  {% endfor %}
                </ul>
            </label>
            {% endunless %}


            {% comment %} If it does not have vaiants then dont show options {% endcomment %}
            {%- unless product.has_only_default_variant -%}
            {% for product_option in product.options_with_values %}
            <br>
            <label>
                <span class="option-label"> {{ product_option.name }} </span>

                <select class="select-option select-general mb-3 {% if product_option.name == 'Color' %}color-drop{% endif %}">
                    {% for value in product_option.values %}
                    <option {% if product_option.selected_value==value %}selected{% endif %} value="{{ value }}">
                        {{ value }}
                    </option>
                    {% endfor %}
                </select>
            </label>
            {% endfor %}
            {% endunless %}
            
            <select name="id" id="variants" class="select__select" hidden>
                {%- for variant in product.variants -%}
                {% for option in variant.option1 %}
                <option {% if variant==product.selected_or_first_available_variant %}selected{% endif %}
                    value="{{ variant.id }}">
                    {{ variant.title }}

                    - {{ variant.price | money | strip_html }}
                </option>
                {% endfor %}
                {%- endfor -%}
            </select>

            <form action="{{ routes.cart_add_url }}" method="POST" class="options-form" id="add-to-cart"
                accept-charset="UTF-8" enctype="multipart/form-data">
                <!-- <p>Line item properties:</p>
                <p class="line-item-property__field">
                    <label for="your-name">Your name</label>
                    <input id="your-name" type="text" name="properties[_Your_name]">
                </p>

                <p class="line-item-property__field">
                    <label for="your-birthdate">Your birthdate</label>
                    <input id="your-birthdate" type="date" name="properties[_Your_birthdate]">
                </p> -->

                <input type="hidden" name="id[]" id="id" value="">
                <label for="" class="option-label"> Quantity:</label>
                <input type="number" name="quantity" id="quantity" value="1" class="quantity-input">


                <div class="free-product-block my-5">
                    <p>Free product:</p>
                    {% for tag in product.tags %}
                        
                        {% assign handle_addon = tag | split: '_' | last %} 
                        {% assign free = tag | split: '_' | first %}
                        {% if free == 'free' %}
                            {% assign product_addon = all_products[handle_addon] %}
                            {% assign variant_addon = product_addon.first_available_variant %}
    
                            <div class="free-product-data">
                                <input type="checkbox" value="{{ variant_addon.id }}" checked name="id[]"> This will be added to cart   
                                <a href="{{ product_addon.url }}" target="_blank"> {{ product_addon.title }}</a>
                                <span> (Price: {{ product_addon.price | | money }}) </span>
                            </div>
    
                        {% endif %}
                        
                    {% endfor %}
                </div>

              
                
                <div class="add-to-cart my-3">
                    <button type="submit" name="add" class="btn btn-dark btn-lg" id="add-to-cart-btn">Add to
                        cart</button>
                </div>

                <script class="variantsJSON-{{ product.id }}" data-variantJSON type="application/json">
                    {{ product.variants | json }}
                </script>

            </form>
        </div>

        <!-- <div class="row">
            {% if product.metafields.my_fields.custom_ != blank %}
                <h1 class="metafield-title">Custom Metafield:</h1>
                <p class="metafield-description" class="metafield-title">{{ product.metafields.my_fields.custom_ }} </p>
            {% endif %}  
            
            {% if product.metafields.descriptors.care_guide != blank %}
                <h1 class="metafield-title">Care Guidelines Metafields:</h1>
                <p class="metafield-description">  {{ product.metafields.descriptors.care_guide }} </p>
            {% endif %}
           
        </div> -->
    </div>

    <!-- related products -->
    {% comment %}
    <div class="row my-5 py-5">
        
        {% for collection in product.collections %}
            {% assign collection_name = collection.title %}
        {% endfor %}

        {% if collections.[collection_name].all_products_count > 0 %}
            <h1 class="title">Related Products:</h1>
            
            <div class="d-flex align-items-stretch justify-content-around">

            {% for p in collections.[collection_name].products limit: 5%}
                {% unless p.handle == product.handle %}

                    <div class="card product-card text-start border-0 overflow-hidden px-3">
                        <div class="card-image">
                            <a href="{{ p.url }}" class="product-url d-block">
                                <img src="{{ p.images[0] | image_url: width: 300 }}" alt="" class="image-1 w-100" loading="lazy">
                                <img src="{{ p.images[1] | image_url: width: 300 }}" alt="" class="image-2 w-100" loading="lazy">
                            </a>
                        </div>
                        <div class="card-body text-start px-0">
                            <a href="{{ p.url }}" class="product-title">
                                <p class="product-title">{{ p.title }}</p>
                            </a>
                            <p class="product-price">{{ p.price | money }}</p>
                        </div>
                        <div class="card-footer border-0 bg-transparent">
                            <div class="row">
                                <div class="col-lg-12 mt-1 mt-lg-0 px-0 ">
                                    <p class="mb-0 shades-available mb-2">
                                        <!-- Add To Cart -->
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>


                {% endunless %}
            {% endfor %}
            </div>
        {% endif %}

    </div>
    {% endcomment %}


</div>

<!-- modal -->
<style>
    #myImg {
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
        display: block;
        margin-left: auto;
        margin-right: auto
    }
    #myImg:hover {opacity: 0.7;}

    /* The Modal (background) */
    .img-modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 99; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0, 0, 0); /* Fallback color */
        background-color: rgba(0,0,0,0.9); /* Black w/ opacity */
    }

    /* Modal Content (image) */
    .img-modal-content {
        margin: auto;
        display: block;
        width: 50%;
    }

    /* Add Animation */
    .img-modal-content, #caption {
        -webkit-animation-name: zoom;
        -webkit-animation-duration: 0.6s;
        animation-name: zoom;
        animation-duration: 0.6s;
    }

    .out {
    animation-name: zoom-out;
    animation-duration: 0.6s;
    }

    /* 100% Image Width on Smaller Screens */
    @media only screen and (max-width: 700px){
        .img-modal-content {
            width: 100%;
        }
    }

    @-webkit-keyframes zoom {
        from {-webkit-transform:scale(1)}
        to {-webkit-transform:scale(2)}
    }
    
    @keyframes zoom {
        from {transform:scale(0.4)}
        to {transform:scale(1)}
    }

    @-webkit-keyframes zoom-out {
        from {transform:scale(1)}
        to {transform:scale(0)}
    }
    @keyframes zoom-out {
        from {transform:scale(1)}
        to {transform:scale(0)}
    }

    .color-swatch {
        display: flex;
    }

    .color-swatch li {
        list-style: none;
        padding: 0 10px;
    }

    .title{
        font-family: Bebas Kai;
        font-size: 50px;
    }

</style>

<script>
    // Get the modal
    var modal = document.getElementById('myModal');
     
    // Get the image and insert it inside the modal - use its "alt" text as a caption
    var img = document.getElementById('myImg');
    var modalImg = document.getElementById("img01");
    img.onclick = function(){
        modal.style.display = "block";
        modalImg.src = this.src;
        modalImg.alt = this.alt;
    }
     
     
    // When the user clicks on <span> (x), close the modal
    modal.onclick = function() {
        img01.className += " out";
        setTimeout(function() {
           modal.style.display = "none";
           img01.className = "modal-content";
         }, 400);
    
    }    
        
</script>
<!-- modal -->

<style>
    .product-title {
        font-family: Bebas Kai;
        font-size: 65px;
    }

    .product-description p {
        font-family: Spartan Regular;
        font-size: 14px;
    }

    .option-label {
        font-size: 13px;
        font-family: 'Spartan Regular';
    }

    .select-general {
        padding: 5px;
        font-size: 12px;
        font-family: 'Spartan Regular';
    }

    .quantity-input {
        padding: 6px;
        font-size: 11px;
        font-family: 'Spartan Regular';
        width: 60px;
    }
    .metafield-title {
        font-family: "Bebas Kai";
        font-size: 35px;
    }

    .metafield-description {
        font-family: 'Spartan Regular';
        font-size: 15px;
    }
    .addon-data {
        font-family: 'Spartan Regular'; 
    }
</style>


<script>
 
    const form = document.querySelector('.options-form');
    const optionsSelect = document.querySelectorAll('.select-option');
    const variantJSON = form.querySelector('[data-variantJSON]');
    const addToCart = document.querySelector('#add-to-cart-btn');

    const variantSelect = document.querySelector('#variants');
    const items = document.querySelector('#id');

    addToCart.addEventListener('click', submitFormFree.bind(this));

    // set event listners
    optionsSelect.forEach(option => {
        option.addEventListener('change', variantChange.bind(this));
    })    





    // get options on event change
    function variantChange(e) {
        let options = [];
        optionsSelect.forEach((select) => {
            options.push(select.value);
        })
        console.log(options);

        // variant array 
        let variants = JSON.parse(variantJSON.textContent);

        // get selected variant
        let currentVariant;

        variants.find((variant) => {
            let mappedValues = variant.options.map((option, index) => {
                return options[index] === option;
            });

            if (!mappedValues.includes(false)) {
                currentVariant = variant;
            }
        });

        // update URL        
        const variantURL = '?variant=' + currentVariant.id;
        history.replaceState(null, null, variantURL);

        // update select hidden 
        variantSelect.value = currentVariant.id;
        items.value = currentVariant.id;

        // update price block
        let selectedVariant = variants.find(variant => variant.id == currentVariant.id)
        const priceField = document.querySelector('#price-box');
        priceField.innerHTML = '$' + (Math.round(selectedVariant.price) / 100).toFixed(2);

        // update imaage
        const imgBlock = document.querySelector('.product-image');
        imgBlock.src = selectedVariant.featured_image.src ;
        // console.log(selectedVariant.featured_image.src);

    }

    // Submit form (for free product, without array) 
    // Pending
    function submitFormFree(e) {
        e.preventDefault();
        
        // let data = new FormData(form);
        // // console.log(JSON.stringify(data));

        // let formDataObject = Object.fromEntries(data.entries());
        // let formDataJsonString = JSON.stringify(formDataObject);
        // console.log(formDataJsonString);
        
        form.submit();

    }

    function submitForm(e) {

        e.preventDefault();
        console.log(e);
        
        let items ;
        const variantSelect = document.querySelector('#variants');
        const quantity = document.querySelector('#quantity');

        // get line item properties
        const lineItemName = document.querySelector('#your-name');
        const lineItemBirthdate = document.querySelector('#your-birthdate');

        // const form = document.querySelector('#add-to-cart');
        // const formData = new FormData(form);
        // console.log(formData.values());

        // const config = fetchConfig('javascript');
        // config.headers['X-Requested-With'] = 'XMLHttpRequest';
        // delete config.headers['Content-Type'];

        // config.body = formData;

        // let requestURL = "{{ routes.cart_add_url }}" ;
        // fetch(requestURL, config)
        // .then(response => {
        //     if (!response.ok) {
        //         throw new Error("HTTP error" + response.status);
        //     }
        //     console.log('added to cart');
        // })
        // .catch( error => {
        //     console.log(error);
        // })
        // form.submit();
    
        // create items array
        items = [{
            id : variantSelect.value,
            quantity : quantity.value,
            properties: ""
        }]

        // add line items to array
        if( lineItemBirthdate.value || lineItemName.value ) {
            let properties =  {
                "_Name": lineItemName.value,
                "_Birthdate": lineItemBirthdate.value
            }
            items[0].properties = properties
            // items.property = properties
        }
        
        // check if anycheck box is selected, if yes, get value, update in items 
        const addons = document.querySelectorAll('.addon-data input');
        addons.forEach(addon => {
            if(addon.checked) {
                // console.log(addon.value);
                let data = {
                    id: addon.value,
                    quantity: 1
                }
                items.push(data);
            }

        })       

        console.log(items);
        console.log( JSON.stringify(items) );
        // return;
    

        // make post request
        let requestURL = "{{ routes.cart_add_url }}" + '.js';
        fetch(requestURL, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            // body: JSON.stringify({
            //     id: variantSelect.value,
            //     quantity: 1
            // })
            body: JSON.stringify({items: items})
        })
        .then(response => {

            if (!response.ok) {
                throw new Error("HTTP error" + response.status);
            }
            console.log('added to cart');
        })
        .catch(error => {
            console.log(error);
        })
        
    }

</script>


<script>

    // for color swatch 
    document.addEventListener("DOMContentLoaded", function () {
        
        const variantJSON = form.querySelector('[data-variantJSON]');

         // get variant image from array
        let variants = JSON.parse(variantJSON.textContent);
        let variantImages = [];
        variants.forEach(variant => {
            if(variant.title.includes(variant.option1)) {
                variantImages.push(variant.featured_image.src)
            }    
        })
        const result = Array.from(new Set(variantImages));


        // show these images on color swatch
        const ul = document.querySelector('.color-swatch');
        let items = ul.getElementsByTagName("li");
        for (var i = 0; i < items.length; ++i) {
            let img = document.createElement("img");
            img.src = result[i];
            img.width = 50;
            items[i].append(img)
        }
            
        
        // set event listners for color swatch
        const cs = document.querySelectorAll('.color-option');
        cs.forEach(li => {
            li.addEventListener('click', updateVariant.bind(this));
        })

        // update variant for color swatch
        function updateVariant(e) {

            // get selected value 
            const selected = e.path[1].firstElementChild.innerHTML.trim();
            console.log(selected);

            // update default select 
            const colorDrop = document.querySelector('.color-drop');

            colorDrop.value = selected;
            // call variant change
            variantChange();
        }

    });
</script>